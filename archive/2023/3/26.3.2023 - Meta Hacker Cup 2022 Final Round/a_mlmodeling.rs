//{"name":"A: ML Modeling","group":"Meta Coding Competitions - Meta Hacker Cup 2022 Final Round","url":"https://www.facebook.com/codingcompetitions/hacker-cup/2022/final-round/problems/A","interactive":false,"timeLimit":360000,"tests":[{"input":"2\n500\n18.243577 16.343618\n24.560940 7.478552\n13.664297 0.348593\n19.766713 16.871980\n14.052491 10.567715\n21.426414 5.786941\n20.495098 -0.246197\n20.706538 14.324784\n13.240629 9.591812\n18.131521 1.645394\n13.085966 5.206907\n12.705525 2.340957\n17.081302 -3.503313\n17.406894 -4.132649\n18.662161 14.841332\n21.722473 13.853187\n12.566132 7.860660\n16.422074 12.005824\n17.360418 15.791112\n17.109026 7.669767\n18.253835 6.466656\n21.249345 1.667549\n21.665745 0.311747\n16.095203 14.907657\n15.823431 -4.340649\n14.764783 -3.979121\n12.216653 2.449552\n12.283698 8.764607\n17.379537 14.086718\n11.356151 4.039189\n18.250737 10.348279\n18.803695 -3.124892\n17.208013 -1.383813\n15.846419 7.176925\n12.209281 2.863600\n19.786703 12.537685\n23.019766 11.553517\n12.677512 3.801674\n21.313409 10.926474\n13.065841 -5.327402\n23.974605 10.274300\n14.052084 5.745476\n12.344311 4.014428\n13.824721 3.340018\n21.333789 16.244543\n22.993558 3.915954\n21.482560 16.650764\n21.423192 9.596803\n17.471653 -2.073008\n19.254667 10.037329\n13.026102 2.910256\n19.164159 15.152278\n15.448711 5.268898\n22.436500 6.103729\n18.713233 -0.696114\n17.319829 -4.614399\n16.303121 6.662335\n18.549615 9.323836\n20.578796 13.197413\n20.101191 10.285048\n12.731656 6.398406\n15.642672 12.203354\n11.739751 -2.209279\n19.999162 12.495027\n13.332741 -0.781345\n16.419368 4.930287\n14.208240 6.146094\n12.668535 3.884128\n17.100494 9.477584\n15.298066 2.105778\n21.715575 3.461332\n13.812862 -0.393683\n15.197469 3.227296\n17.805714 12.076443\n14.894292 -2.076883\n11.362856 0.971215\n11.152936 -0.329086\n24.312335 12.223521\n23.850104 13.665174\n13.611467 7.009552\n22.958613 10.937624\n17.476002 5.911470\n13.385598 8.687516\n15.245710 4.570724\n17.698810 15.101508\n14.683332 8.660956\n17.830283 14.623531\n11.844331 0.565127\n22.538936 14.469856\n14.570230 -2.940471\n23.501721 7.793592\n22.580591 6.388695\n17.440296 5.839274\n17.532098 6.355300\n16.728496 6.375671\n18.752338 6.307287\n21.240144 10.501905\n14.970281 7.859548\n15.357577 -4.434922\n16.310483 -1.394290\n22.759885 9.828241\n14.186619 5.960630\n24.193644 14.368893\n17.442571 12.499045\n13.034105 -6.500657\n17.697254 11.737589\n13.480724 -3.930224\n22.150737 17.126988\n13.391916 -0.925885\n23.572665 4.572828\n15.420402 8.829672\n16.683175 5.409393\n20.887778 5.088725\n13.519647 4.812447\n17.129407 -1.925479\n16.603673 3.593709\n22.113753 16.325847\n13.066364 2.073991\n15.710264 8.778860\n17.767049 8.993840\n11.706371 -1.170487\n11.470356 2.861039\n17.231284 7.889578\n24.189637 14.224167\n19.075589 11.166930\n20.937783 13.154556\n23.523316 12.300135\n14.445991 11.359735\n19.239496 12.970156\n21.742953 4.547351\n12.910622 1.840402\n21.075760 6.167560\n13.244078 -2.969471\n13.140408 -6.471153\n20.315724 14.875012\n23.818682 11.079752\n17.887454 -2.232520\n18.666566 0.092412\n14.317916 -3.570190\n15.472072 -2.829925\n21.556983 0.279414\n22.036423 1.708065\n14.568483 0.688430\n19.482935 8.690586\n17.496132 11.691013\n15.570701 5.436852\n18.179237 -3.363174\n14.980168 8.543218\n14.915177 -0.184438\n14.969153 0.104570\n14.067303 7.651140\n14.964894 0.975905\n20.284008 6.167394\n22.797939 6.211927\n16.313922 14.186456\n14.834579 12.685060\n21.480677 2.065544\n12.584922 3.150118\n13.136840 0.802224\n11.390730 -0.761440\n17.002476 5.312136\n20.846441 4.748559\n17.902435 4.933033\n14.915677 3.063146\n14.466079 -3.505656\n16.495423 -0.516658\n15.123951 -1.633273\n19.347161 16.123210\n24.262812 13.836784\n16.744183 13.521877\n13.795204 4.941614\n15.614470 12.670248\n14.141935 9.959788\n11.217067 4.675771\n12.697649 -0.067208\n19.514341 13.742676\n16.637732 3.278594\n21.107319 14.689994\n17.380294 10.999330\n20.672382 14.136265\n11.533785 2.455757\n21.634049 10.042583\n19.865202 14.092486\n22.647324 17.180916\n13.916645 2.700255\n21.097245 12.705439\n14.797356 -2.723860\n15.674174 -1.807078\n21.891569 6.225470\n18.340370 9.365718\n17.377817 6.161102\n15.117478 0.715163\n18.782919 3.899382\n13.107155 7.205792\n18.844233 16.639468\n18.316959 -1.084489\n16.864189 6.381003\n17.413163 -2.782152\n18.155452 7.203062\n22.653910 1.225094\n15.276962 6.826973\n19.467625 4.793109\n21.273117 10.211036\n13.053714 4.142984\n11.594127 1.722787\n17.187284 5.900224\n20.751730 5.502650\n19.298775 7.373680\n20.090593 -1.788020\n22.540876 13.519997\n11.735849 2.496556\n16.109133 14.156335\n19.604004 11.711670\n23.481796 4.654737\n18.756305 8.135686\n20.751269 0.800819\n14.073437 7.240697\n17.022144 7.532538\n14.800061 10.052073\n19.638047 3.327763\n19.495916 9.221839\n11.418687 -1.636822\n16.627811 3.856185\n22.189477 18.520143\n19.746557 -1.725730\n16.438720 10.266559\n19.785090 6.069816\n16.417114 13.062245\n15.667475 9.619686\n19.909511 5.066407\n20.251697 17.418113\n22.658481 18.376700\n11.513801 1.356283\n18.258572 2.014423\n17.457905 7.408070\n21.347081 10.562006\n12.259695 0.465383\n11.687451 2.106452\n14.026429 -5.711334\n15.410070 -4.322808\n16.792314 0.508719\n20.651046 7.219566\n14.634011 10.399200\n12.405734 -2.693974\n14.716979 -3.275552\n13.872859 -2.763565\n22.064022 11.633544\n15.729799 10.378849\n19.310824 0.908302\n11.290350 5.008839\n17.987185 11.212424\n18.933293 11.589430\n24.225082 14.074144\n14.280323 2.518275\n23.126585 8.980823\n15.261063 1.383509\n22.828022 17.600195\n12.454820 4.367434\n18.535066 3.691446\n20.314638 18.047548\n23.145756 15.102703\n13.296147 -6.688498\n21.647239 1.718656\n24.121364 15.219336\n13.194050 8.691127\n11.766890 5.884297\n18.217592 14.226418\n17.915127 2.176438\n14.634272 -3.488542\n20.234345 0.554279\n17.188012 7.985024\n17.346218 10.995344\n18.669436 2.636653\n18.951858 11.670444\n13.285687 -1.499801\n22.001488 14.067161\n22.770735 7.750486\n12.963328 5.944176\n20.682994 15.335158\n11.114365 0.432639\n23.735128 15.517813\n22.032538 6.398391\n15.201702 -3.937585\n18.687441 15.891635\n14.161156 9.388260\n13.996130 4.657658\n22.323146 6.098112\n20.934790 10.211547\n16.590131 5.371991\n20.039944 12.763506\n14.652548 11.006175\n19.154292 4.181016\n17.199467 2.304127\n14.206927 9.107424\n19.143110 4.677616\n21.210108 11.776738\n22.448183 9.536389\n24.468761 12.923552\n19.753874 2.928480\n15.879698 8.601265\n21.579355 10.235260\n12.337658 8.782207\n16.823056 1.073752\n23.213925 8.143511\n18.283541 10.342998\n21.109487 4.830167\n20.576977 18.388817\n17.305744 5.831552\n15.129693 5.247627\n16.948835 11.394945\n11.708893 -1.237782\n11.640301 0.735272\n18.564261 7.765312\n15.367225 12.715984\n17.515852 13.448675\n18.427577 -4.113174\n16.063344 4.479923\n19.850385 13.378851\n17.990363 11.657032\n17.696624 0.518123\n20.326250 10.275394\n16.374879 6.186846\n12.339243 3.446059\n19.054799 -1.407273\n22.345393 0.656893\n12.027935 -0.424062\n23.649456 5.875965\n16.363737 13.309612\n15.567342 13.854572\n19.403075 -2.105705\n22.961203 12.299632\n14.376183 7.683317\n17.591174 13.661803\n11.394050 0.175477\n14.569772 4.742531\n15.213890 2.957571\n23.610500 15.936788\n14.141149 1.670263\n18.528925 11.541278\n23.898984 9.211051\n13.211419 10.291301\n22.984657 14.996915\n16.231052 -2.488522\n20.056612 8.249936\n11.894928 1.368478\n24.280032 9.901244\n13.543034 7.292310\n21.466143 6.122634\n17.050924 10.602068\n14.559508 -2.832191\n16.002019 14.311328\n15.689925 -5.344107\n18.137508 11.902096\n21.828029 6.265151\n12.626233 5.939640\n19.495225 -2.888468\n14.731963 5.949898\n14.539116 3.761306\n13.563525 5.118103\n20.781815 4.269694\n14.646917 3.059797\n19.582913 9.167719\n11.998265 6.262899\n18.248830 15.023882\n17.738511 -3.775898\n20.613168 8.945199\n11.812803 0.311242\n24.163159 5.006179\n21.371522 18.282868\n14.865494 13.354208\n18.606131 3.411418\n20.882197 6.015836\n21.219685 1.104721\n17.830305 11.210971\n19.458500 -0.184236\n11.294817 1.942603\n19.357381 11.114160\n14.342764 -1.600163\n13.078637 1.105681\n16.311977 7.151695\n18.727277 4.389283\n20.787157 9.958316\n20.703801 2.179316\n16.405388 -0.443747\n23.490212 13.183778\n14.704340 6.400590\n12.762951 9.163493\n14.879646 8.827834\n21.287460 14.149522\n11.842059 2.628325\n17.880290 15.006137\n18.488039 13.571962\n16.821542 1.475234\n20.002707 7.186862\n21.002156 3.685887\n22.249825 5.127291\n19.210100 2.009205\n17.068320 14.565406\n22.923564 9.027532\n12.761185 6.521029\n16.884040 -4.998579\n11.380716 1.854268\n21.946966 11.675032\n14.934287 1.053398\n15.176332 8.083325\n22.785108 3.453335\n13.580786 -2.436422\n12.008668 -0.448807\n22.285708 6.989855\n11.515857 6.041525\n15.121135 -4.946932\n22.928785 3.446890\n21.326448 1.359870\n22.521962 12.562228\n21.165139 8.573858\n21.684998 17.690259\n14.438082 5.794504\n21.031054 9.259496\n17.279543 -3.524403\n19.916938 2.219192\n16.274795 13.211478\n22.838144 13.435671\n21.410865 10.932324\n13.968554 2.445044\n17.281427 5.253919\n11.785362 7.062835\n19.891893 4.854905\n22.357187 10.673764\n20.926022 17.195318\n12.342682 7.376183\n17.739443 14.821393\n13.242037 4.155476\n13.216160 9.938764\n15.535745 9.586368\n11.720537 5.201965\n18.051503 5.764098\n14.760959 -1.865235\n16.287678 13.346010\n12.837573 -4.549325\n18.912745 6.950515\n21.757445 2.312409\n17.617996 5.427429\n18.643869 -1.983641\n20.721220 4.218309\n15.411880 2.817564\n16.139809 -3.232530\n23.725701 13.763255\n16.011610 -4.548052\n15.915922 -2.430327\n11.575523 0.684496\n15.099677 -4.363962\n17.991955 8.201164\n18.803073 2.670414\n16.811572 12.341744\n12.941817 -2.988387\n22.065002 9.335321\n14.385033 -2.828393\n14.482881 4.155121\n11.368385 3.728045\n12.616389 5.472795\n13.723615 1.901616\n17.134331 4.595940\n18.927768 4.830461\n18.909544 -1.361066\n11.543834 6.117217\n18.542131 14.676562\n17.502316 10.484115\n20.258744 7.166175\n14.160867 2.204443\n14.790041 -6.095155\n22.782137 8.059894\n16.203873 12.718181\n17.034161 7.989151\n19.991610 8.234883\n12.719392 5.517438\n20.999982 17.261621\n20.469714 2.621880\n18.234895 15.202904\n16.422493 -3.498837\n16.596906 3.914879\n14.752444 -0.821616\n15.314792 11.415450\n12.851978 9.336743\n21.322624 13.745326\n13.786509 8.308467\n17.942216 12.143173\n17.073233 6.949597\n14.640306 6.576499\n14.271760 -6.901011\n22.238735 13.842624\n14.931032 10.612377\n19.888461 12.948929\n23.220118 17.001903\n20.177677 17.873523\n15.306416 12.140175\n12.881961 -1.375601\n15.604397 6.135945\n20.500871 16.129972\n14.722210 2.613046\n19.842808 8.445985\n500\n39.710957 45.266595\n41.094057 48.798544\n32.730857 56.546952\n39.923442 50.088557\n31.605212 50.959184\n44.136309 48.892818\n40.679879 53.937977\n36.294096 47.800636\n40.113173 50.213649\n45.815416 49.890518\n35.390036 51.205328\n40.179830 56.875049\n43.017164 50.051028\n49.406105 49.928356\n39.677790 50.945483\n30.190194 51.691234\n41.459104 50.089287\n38.109223 49.793925\n41.014266 48.975303\n39.618398 49.872185\n39.178027 41.046407\n41.431534 54.213090\n38.964825 49.047545\n38.658587 38.203762\n47.028748 50.926262\n44.946954 55.941038\n41.748067 50.327319\n40.402357 52.302971\n37.396668 49.029110\n39.970103 46.738960\n41.557000 49.028231\n46.653893 51.850747\n34.323012 38.342964\n36.171351 40.954143\n39.214588 49.000613\n41.740162 43.060434\n38.431705 46.437356\n39.979116 49.952087\n36.978888 39.194257\n46.443834 49.909108\n40.480895 52.766131\n45.754379 46.547171\n42.166935 46.402821\n48.080283 41.894377\n38.246017 43.416761\n41.953040 50.476751\n39.865857 49.530552\n41.857377 50.013353\n44.380329 46.520652\n35.459070 54.378871\n43.232534 48.169888\n39.632352 42.449325\n43.925993 47.340151\n37.698824 44.739390\n28.184573 52.497879\n38.538581 50.028130\n40.521712 50.372595\n35.229803 49.007954\n43.099286 47.894280\n38.542279 56.193252\n41.871149 54.439086\n46.674640 48.198138\n46.205344 49.817384\n30.971898 55.545589\n41.559736 38.994530\n40.177922 37.904946\n30.494785 48.157057\n35.719292 46.167523\n45.530931 39.738645\n42.873389 37.980906\n31.878676 44.846620\n48.186863 47.771724\n29.228833 46.725250\n45.223304 50.998057\n47.870020 49.148890\n39.352382 54.673676\n40.148100 47.892058\n44.647657 53.001798\n46.614089 53.399927\n40.663255 50.223452\n42.640232 52.380332\n43.778852 48.694217\n34.158139 50.997053\n41.136006 49.992605\n40.053666 49.921808\n35.225913 46.713783\n40.601042 50.439770\n41.586720 48.240993\n39.443384 52.084739\n34.596839 54.522052\n38.969216 50.791696\n39.049111 50.254377\n37.013686 50.373442\n32.414501 39.750556\n32.434373 47.907422\n39.854269 49.799558\n45.722175 47.402687\n38.153656 50.675492\n41.137037 51.734551\n45.508697 45.788019\n38.247781 52.070213\n39.939174 48.752783\n42.506471 48.492028\n37.919994 53.660953\n40.172611 48.041809\n39.614792 47.091801\n50.201163 48.560086\n43.357359 53.958365\n40.194645 50.406657\n40.354321 46.381505\n35.903486 48.114179\n38.386775 56.259680\n40.357767 54.203151\n43.972331 47.069318\n47.446154 51.523650\n32.359882 41.212162\n38.732705 42.740130\n39.463927 47.524004\n42.812980 55.454894\n41.795590 49.173620\n39.032718 50.273038\n32.518649 48.442989\n40.839095 50.473562\n40.410917 48.100713\n35.130014 43.156838\n39.249088 57.935378\n40.779368 52.280509\n41.615880 50.993354\n36.334769 56.266999\n36.601264 42.388724\n34.944154 41.799126\n42.854057 52.162139\n33.152265 44.680723\n34.271882 53.290670\n41.475050 57.238456\n39.932776 50.705882\n48.979293 49.011608\n39.305110 49.793842\n35.442708 52.646366\n39.889823 50.072493\n37.582594 44.403575\n44.259902 52.119507\n33.297470 49.354147\n33.461744 46.894107\n39.409612 54.773790\n35.086432 51.758613\n40.290717 51.729781\n37.038409 45.767644\n40.629452 51.952247\n43.559446 53.269191\n37.350402 50.836273\n41.022322 54.801113\n38.840797 51.618559\n39.128142 50.178447\n48.635788 47.819744\n41.778652 47.256399\n39.073664 51.113564\n39.865049 47.329230\n39.979471 50.040133\n41.071938 53.165958\n39.924370 50.050306\n40.422036 40.620715\n46.308078 50.771640\n31.790126 56.360747\n34.955053 44.626032\n37.504998 56.239796\n40.213975 50.612955\n41.205129 49.902843\n34.036798 44.778043\n48.385887 48.505653\n40.440069 50.654286\n31.760689 53.120080\n36.559574 39.373117\n40.738227 49.175229\n38.242645 56.969227\n40.040945 49.546137\n39.340671 56.635673\n37.819319 43.171628\n35.120439 50.036466\n41.312137 51.650149\n45.160639 39.138498\n42.562569 46.601520\n40.309043 40.357372\n35.174605 50.761648\n41.057364 52.244331\n39.940033 50.084898\n44.595424 49.420787\n30.067301 55.155793\n45.865714 48.211928\n37.409045 52.919590\n49.661212 49.376667\n42.498227 45.363746\n39.886511 50.012223\n46.096362 54.275603\n35.947168 42.034252\n36.432942 44.574235\n34.362423 46.302890\n38.119111 54.078242\n37.747013 54.868288\n31.873562 45.516690\n32.515813 53.516542\n39.671665 42.871466\n33.579744 40.047387\n31.576114 54.361684\n41.452554 52.385149\n40.462635 48.856155\n40.353170 50.189707\n34.169142 54.262581\n30.950592 42.675391\n35.575152 51.110144\n46.128889 45.104205\n36.157801 49.820947\n37.006649 47.203003\n44.464543 56.140591\n41.286502 51.738602\n38.099177 57.013475\n46.631406 47.176450\n45.046065 40.843340\n36.725044 49.700036\n40.138197 49.875275\n35.599979 56.208785\n47.168374 52.655980\n39.894782 50.020758\n36.007925 41.739840\n33.860398 54.502449\n47.340651 51.076716\n38.239283 55.920821\n38.124766 49.978608\n41.136594 48.377128\n29.427001 48.240045\n28.108165 44.835984\n34.427556 49.470320\n40.059227 49.550819\n38.001566 56.703105\n39.974419 48.997753\n48.870087 49.093396\n40.212240 53.272341\n39.789322 52.876445\n40.845778 38.101325\n45.696749 44.896706\n42.170637 47.468178\n45.003262 47.392827\n42.789490 46.174756\n40.136490 49.363977\n40.922267 49.030949\n49.333579 46.468735\n45.022548 47.906167\n43.637612 52.857929\n47.268117 47.519882\n41.272130 54.197584\n34.082949 43.254136\n38.036205 40.661918\n42.655798 41.576628\n29.807866 47.872254\n28.601989 46.178377\n45.411278 45.931233\n32.453695 55.680718\n40.016094 49.898548\n31.326411 50.604130\n42.541382 46.391883\n28.142174 45.606911\n42.148711 43.006960\n31.308546 53.696334\n45.323549 48.297625\n41.814194 53.978169\n46.899230 47.272690\n38.927142 48.380082\n40.496094 50.455800\n29.517210 53.065575\n39.362424 50.197373\n41.328216 50.818224\n45.522371 52.786934\n37.901221 53.182777\n33.441511 53.449409\n41.329462 48.275714\n36.578736 50.137690\n29.935958 48.603522\n39.120310 43.660767\n36.182135 55.431890\n39.146117 43.984569\n40.997061 38.106491\n35.989093 46.728348\n37.448224 53.295281\n40.814741 49.310066\n31.784712 52.810431\n48.970584 43.550682\n40.665791 48.928635\n37.455128 44.746699\n46.152666 48.957633\n30.336969 48.234010\n32.695164 51.864903\n31.589178 43.457383\n46.147549 53.306138\n31.999644 52.420644\n37.882452 52.135957\n40.844183 49.988777\n36.467747 48.329731\n40.117265 49.605837\n39.689079 49.782545\n38.403469 54.554917\n40.421711 49.109454\n35.043304 45.353460\n37.700068 47.538726\n48.128997 49.081839\n42.460803 40.752714\n37.235602 50.072579\n45.674603 44.480303\n37.349137 46.221747\n44.085857 39.527531\n39.451587 49.957036\n34.806971 49.046043\n35.529302 51.253406\n40.190963 49.973052\n39.633260 47.552746\n35.453864 43.969233\n34.274948 53.082556\n39.463399 50.393113\n37.957584 45.630232\n37.322489 54.006826\n44.606528 41.399097\n39.411046 40.458141\n31.338206 50.536917\n31.136214 43.527204\n45.798060 50.822431\n34.871658 50.062171\n35.844121 42.638803\n34.872808 41.204881\n43.755368 51.614795\n38.982354 49.926225\n40.469698 48.179031\n35.913369 43.066653\n42.528609 45.767257\n48.618570 46.356773\n27.872295 52.528578\n41.715208 51.600960\n41.181149 53.685790\n39.303489 53.892835\n39.293418 48.153534\n41.756249 51.245006\n31.774363 44.426609\n34.861405 46.757609\n40.802245 48.921425\n43.937823 48.149107\n39.046799 51.495534\n44.164015 47.377663\n33.810651 55.003684\n34.927154 47.447552\n34.035538 44.333249\n37.871520 39.762833\n40.666335 49.469386\n36.616461 47.193929\n30.155009 55.226397\n38.487555 53.622646\n40.997810 42.076416\n45.945407 44.422717\n41.899604 45.437848\n35.851069 39.610831\n35.506742 46.914798\n44.438356 53.799029\n39.989213 47.854211\n40.688131 48.384774\n34.652201 50.303544\n33.755665 45.964317\n40.030597 38.511805\n40.496887 49.662393\n38.227873 56.650526\n42.024271 50.307892\n40.098551 51.020802\n37.124217 56.020006\n45.573360 49.079709\n38.113194 47.452914\n41.032388 49.568862\n40.468636 41.700309\n37.471402 53.415458\n41.048122 50.915859\n34.495824 52.399788\n36.448848 47.859274\n39.011571 45.145133\n40.775737 54.882725\n29.285397 47.497443\n39.026980 50.093095\n47.015660 53.027474\n34.763263 40.445794\n36.897710 46.648874\n40.241097 46.761277\n48.060150 52.452125\n40.306719 47.029494\n42.084311 49.727923\n35.976952 56.782986\n47.126106 49.162825\n37.897456 51.564894\n36.654695 50.819627\n40.781800 53.945677\n41.842433 53.752172\n41.589129 53.110102\n32.761789 44.088345\n41.719804 53.989094\n36.944823 45.053298\n42.827828 46.842898\n41.016473 46.911213\n38.918312 54.211936\n37.981049 47.710730\n39.890346 50.385934\n44.764060 50.488667\n40.308209 49.871190\n38.160808 41.818470\n47.957911 43.210035\n43.687500 51.766336\n41.918077 50.059497\n31.679299 54.296609\n45.771261 49.218397\n38.123103 57.954250\n36.124360 38.699324\n32.968935 45.593800\n36.560694 51.382055\n34.735064 40.361008\n32.251581 42.107719\n44.199665 41.877420\n41.143788 50.764761\n33.338016 46.664050\n49.922917 42.219510\n50.478030 44.841695\n39.976942 50.064551\n34.875631 50.503983\n47.770352 41.098315\n38.284620 54.466581\n46.593736 53.092283\n39.045259 51.162862\n39.613480 49.903060\n29.546920 50.066181\n41.943758 43.196521\n37.059391 50.779753\n39.992419 49.911640\n47.980034 43.365287\n34.320640 40.515435\n42.231814 47.944971\n43.508937 52.307746\n39.973595 46.291718\n44.220332 52.161464\n41.159619 40.973367\n47.101236 49.724113\n39.782978 50.204596\n39.559919 49.480320\n36.835299 48.650068\n37.883515 44.698028\n44.397487 41.980311\n34.290696 48.708611\n36.936342 50.120652\n41.121951 52.657115\n43.518312 44.024548\n39.437155 52.745160\n39.835412 46.283453\n40.310665 48.125508\n45.963017 48.159980\n38.177037 51.293065\n45.889694 55.310913\n42.049010 49.604768\n28.899711 52.311737\n37.241460 44.649299\n33.318865 47.628176\n40.966198 51.913582\n40.366353 49.362066\n29.296032 49.797302\n43.173336 52.250949\n47.690825 49.396015\n33.643206 43.968056\n30.131878 46.189694\n33.388653 54.541037\n32.137200 45.597199\n39.122132 49.672227\n41.584771 56.233178\n36.580879 44.724607\n39.466947 51.197577\n37.561921 47.022670\n42.761769 48.915168\n39.787125 44.289218\n45.484312 43.809723\n41.811338 48.622222\n37.213599 49.935951\n39.942045 49.772859\n49.891856 42.872467\n31.964570 45.776619\n40.171680 49.987490\n37.038137 52.940678\n35.265299 47.478347\n44.996427 49.981928\n39.734830 54.125940\n40.304740 53.221447\n38.560754 46.599124\n39.647909 51.223265\n36.609585 37.915030\n34.542710 46.975530\n40.441693 50.006388\n34.944957 44.328503\n47.217304 47.688772\n38.580101 51.789895\n41.506001 49.071389\n42.049850 50.259588\n34.832636 47.585776\n42.867048 45.434276\n","output":"Case #1: 6 10 30 2 19\nCase #2: 40 50 38 45 13\n"}],"testType":"multiNumber","input":{"type":"regex","fileName":null,"pattern":"ml_modeling_.*input[.]txt"},"output":{"type":"file","fileName":"ml_modeling_output.txt","pattern":null},"languages":{"java":{"taskClass":"AMLModeling"}}}

use algo_lib::f;
use algo_lib::geometry::point::PointT;
use algo_lib::io::output::output;
use algo_lib::io::task_io_settings::TaskIoType;
use algo_lib::io::task_runner::run_task;
use algo_lib::io::{input::Input, task_io_settings::TaskIoSettings};
use algo_lib::misc::ord_f64::OrdF64;
#[allow(unused)]
use algo_lib::{dbg, out, out_line};

#[allow(unused)]
use algo_lib::misc::run_parallel::{run_parallel, ParallelJob};

fn solve(input: &mut Input) {
    // let tc = input.usize();
    // for test_case in 1..=tc {
    //     dbg!(test_case);

    //     out_line!(format!("Case #{}: ", test_case));
    // }
    run_parallel::<Job>(input, Some(1), &());
}

type Point = PointT<OrdF64>;

#[derive(Clone, Default)]
struct Job {
    pts: Vec<Point>,
    answer: PotentialAnswer,
}

#[derive(Default, Clone)]
struct PotentialAnswer {
    p1: Point,
    p2: Point,
    area: OrdF64,
    r: usize,
}

impl ParallelJob for Job {
    type Context = ();

    fn read_input(&mut self, input: &mut Input) {
        let n = input.usize();
        for _ in 0..n {
            let p = Point::new(f!(input.f64()), f!(input.f64()));
            self.pts.push(p);
        }
    }

    fn solve(&mut self, context: &Self::Context) {
        let mut sum = Point::ZERO;
        for p in self.pts.iter() {
            sum += *p;
        }
        let sz = f!(self.pts.len() as f64);
        let center = Point::new(sum.x / sz, sum.y / sz);
        let mut furthest = self.pts[0];
        for p in self.pts.iter() {
            let d = p.dist2(&center);
            let old_d = furthest.dist2(&center);
            if d > old_d {
                furthest = p.clone();
            }
        }
        let d = center.dist2(&furthest).sqrt();
        const C: usize = 50;

        self.answer.area = f!(f64::MAX);
        const DIFF: f64 = 5.0;

        for r in 1..=C {
            let r = f!(r as f64);
            if r < d {
                continue;
            }
            let mut good_points = vec![];
            let exp_dist = (r * r - d * d).sqrt();
            let ok_dist2_from = (exp_dist - f!(DIFF)).powf(2.0);
            let ok_dist2_to = (exp_dist + f!(DIFF)).powf(2.0);
            for x in 0..=C {
                for y in 0..=C {
                    let check_p = Point::new(f!(x as f64), f!(y as f64));
                    let now_dist2 = check_p.dist2(&center);
                    if now_dist2 >= ok_dist2_from && now_dist2 <= ok_dist2_to {
                        good_points.push(check_p);
                    }
                }
            }
            let r2 = r * r;
            let mut really_good_points = vec![];
            for &check_p in good_points.iter() {
                let mut ok = true;
                let mut max_now_dist = f!(0.0);
                for p in self.pts.iter() {
                    let now_dist = check_p.dist2(p);
                    if now_dist > r2 {
                        ok = false;
                        break;
                    }
                    if now_dist > max_now_dist {
                        max_now_dist = now_dist;
                    }
                }
                let my_max_dist = max_now_dist.sqrt();
                if ok && my_max_dist + f!(3.0) >= r {
                    really_good_points.push(check_p);
                }
            }

            for i in 0..really_good_points.len() {
                for j in i + 1..really_good_points.len() {
                    let p1 = really_good_points[i];
                    let p2 = really_good_points[j];
                    let dist = p1.dist2(&p2).sqrt() / f!(2.0);
                    if (dist - exp_dist).abs() > f!(DIFF) {
                        continue;
                    }
                    let real_h = (r2 - dist * dist).sqrt();
                    let segm = real_h * dist / f!(2.0);
                    let angle = f64::acos((dist / r).0);
                    // eprintln!("{} {} {}", (real_h - another_h).abs(), real_h, another_h);
                    let area = f!(angle) * r2 / f!(2.0) - segm;
                    if area < self.answer.area {
                        self.answer.area = area;
                        self.answer.p1 = p1;
                        self.answer.p2 = p2;
                        self.answer.r = r.0 as usize;
                    }
                }
            }
        }
        let expected_center = (self.answer.p1 + self.answer.p2);
        let expected_center = Point::new(expected_center.x / f!(2.0), expected_center.y / f!(2.0));
        let my_dist = self.answer.p1.dist2(&self.answer.p2).sqrt();
        eprintln!(
            "center = {:?}, my = {:?}, area = {},  my_dist = {my_dist}, r = {}",
            center, expected_center, self.answer.area, self.answer.r
        );
    }

    fn write_output(&mut self, test_case: usize) {
        let p1 = self.answer.p1;
        let p2 = self.answer.p2;
        out_line!(format!(
            "Case #{}: {} {} {} {} {}",
            test_case, p1.x.0 as i32, p1.y.0 as i32, p2.x.0 as i32, p2.y.0 as i32, self.answer.r
        ));
    }
}

pub(crate) fn run(mut input: Input) -> bool {
    solve(&mut input);
    output().flush();
    true
}

#[allow(unused)]
pub fn submit() -> bool {
    let io = TaskIoSettings {
        is_interactive: false,
        input: TaskIoType::Std,
        output: TaskIoType::File("ml_modeling_output.txt".to_string()),
    };

    run_task(io, run)
}

//START MAIN
mod tester;

fn main() {
    // tester::run_tests();
    // tester::run_single_test("1");
    // tester::run_stress(stress);
    // tester::run_locally();
    tester::run_with_last_downloaded_file();
}
//END MAIN
